trigger:
  - master
  - develop
  - release/*

pr:
  - master
  - develop

# set the build name
name: $[ variables['branchName'] ]

# run tests and full conda/tox build matrix every night at 4am
schedules:
- cron: "0 4 * * *"
  displayName: Nightly full build
  branches:
    include:
    - develop

variables:
  ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')) }}:
    branchName: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    branchName: $[ replace(variables['System.PullRequest.TargetBranch'], 'refs/heads/', '') ]
  master_or_release: >
    ${{ or(
    startsWith(variables['branchName'], 'release'),
    eq(variables['branchName'], 'master'),
    eq(variables['Build.Reason'], 'Schedule')
    )
    }}

stages:
  # Check code quality first to fail fast (isort, flake8, black)
  - stage: code_quality_checks
    displayName: 'Code quality'
    jobs:
      - job:
        displayName: 'isort'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.7.*'
            displayName: 'use Python 3.7'
          - script: |
              python -m pip install isort==5.5.4
              python -m isort --check --diff .
            displayName: 'isort'
      - job:
        displayName: 'black'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.7.*'
            displayName: 'use Python 3.7'
          - script: |
              python -m pip install black==20.8b1
              python -m black --check .
            displayName: 'black'
      - job:
        displayName: 'flake8'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.7.*'
            displayName: 'use Python 3.7'
          - script: |
              python -m pip install flake8 flake8-comprehensions flake8-import-order
              python -m flake8 --config tox.ini -v .
            displayName: 'Run flake8'

  # detect whether the build config (pyproject.toml) was changed -> then we must run a build test
  - stage: detect_build_config_changes
    displayName: 'Pyproject.toml build config'

    jobs:

      - job: checkout_and_diff
        displayName: 'detect changes'
        steps:
          - checkout: self

          - task: Bash@3
            name: diff
            inputs:
              targetType: 'inline'
              script: |
                cd $(Build.Repository.LocalPath)
                git diff-index --exit-code "origin/$(branchName)" pyproject.toml
                build_changed="$?"
                if [ "$build_changed" = 1 ]; then
                echo "conda build config has been changed"
                else
                echo "conda build config is unchanged"
                fi
                echo "##vso[task.setvariable variable=conda_build_config_changed;isOutput=true]$build_changed"


  - stage:
    displayName: 'Unit tests'
    dependsOn: 'detect_build_config_changes'
    variables:
      conda_build_config_changed: $[ stageDependencies.detect_build_config_changes.checkout_and_diff.outputs['diff.conda_build_config_changed'] ]

    jobs:
    - job:
      displayName: 'pytest @ develop environment'
      condition: >
        and(
        ne(variables.master_or_release, 'True'),
        eq(stageDependencies.detect_build_config_changes.checkout_and_diff.outputs['diff.conda_build_config_changed'], '0')
        )

      pool:
          vmImage: 'ubuntu-latest'

      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.7.*'
          displayName: 'use Python 3.7'

        - checkout: self
          path: pytools

        - script: dir $(Build.SourcesDirectory)

        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              set -e
              pip install flit
              flit build
          displayName: 'Quick build test'

        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              set -e
              eval "$(conda shell.bash hook)"
              cd $(System.DefaultWorkingDirectory)
              export PYTHONPATH=$(System.DefaultWorkingDirectory)/src
              conda env create -f environment.yml
              conda activate pytools-develop
              cd $(System.DefaultWorkingDirectory)
              pip install pytest-azurepipelines
              coverage run -m pytest test/test/
              coverage xml
              coverage html
          displayName: 'pytest'

        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testResultsFiles: '$(Build.Repository.LocalPath)/*.xml'
            searchFolder: '$(Build.Repository.LocalPath)'
            testRunTitle: 'Publish test results'

        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'
            reportDirectory: '$(System.DefaultWorkingDirectory)/htmlcov'

  # CONDA ENV & TOX BUILD TEST
  # TESTING MATRIX OF PYTHON & SKLEARN VERSIONS
  # - FOR RELEASE BRANCH: 3 BUILD TESTS
  # - OTHERWISE: 1 BUILD TEST
  - stage:
    displayName: 'Conda build & test'
    dependsOn: 'detect_build_config_changes'
    variables:
      conda_build_config_changed: $[ stageDependencies.detect_build_config_changes.checkout_and_diff.outputs['diff.conda_build_config_changed'] ]

    jobs:
    - job:
      displayName: 'single'
      condition: >
        and(
        ne(variables.master_or_release, 'True'),
        ne(stageDependencies.detect_build_config_changes.checkout_and_diff.outputs['diff.conda_build_config_changed'], '0')
        )

      pool:
          vmImage: 'ubuntu-latest'
      strategy:
        matrix:
          maximum_dependencies_conda:
            FACET_V_PYTHON_BUILD: '=3.8.*'
            BUILD_SYSTEM: 'conda'
            PKG_DEPENDENCIES: 'max'
          maximum_dependencies_tox:
            FACET_V_PYTHON_BUILD: '=3.8.*'
            BUILD_SYSTEM: 'tox'
            PKG_DEPENDENCIES: 'max'
      
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(FACET_V_PYTHON_BUILD)'
          displayName: 'Use Python $(FACET_V_PYTHON_BUILD)'

        - checkout: self
          path: pytools

        - script: dir $(Build.SourcesDirectory)

        - script: |
            conda install -y conda-build toml=0.10.* flit=3.0.*
          displayName: 'Install conda-build, flit, toml'
          condition: eq(variables['BUILD_SYSTEM'], 'conda')

        - script: |
            python -m pip install "toml==0.10.*"
            python -m pip install "flit==3.0.*"
            flit --version
            python -m pip install "tox==3.20.*"
            tox --version
          displayName: 'Install tox, flit & toml'
          condition: eq(variables['BUILD_SYSTEM'], 'tox')

        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              if [ "$BUILD_SYSTEM" = "conda" ] ; then eval "$(conda shell.bash hook)" ; fi
              export PYTHONPATH=$(System.DefaultWorkingDirectory)/src

              cd $(System.DefaultWorkingDirectory)

              ./make.py pytools $(BUILD_SYSTEM) $(PKG_DEPENDENCIES)

          displayName: "build & test conda&pip package"

    - job:
      displayName: 'matrix'
      condition: eq(variables.master_or_release, 'True')

      pool:
        vmImage: 'ubuntu-latest'
      strategy:
        matrix:
          default_dependencies_conda:
            FACET_V_PYTHON_BUILD: '=3.7.*'
            BUILD_SYSTEM: 'conda'
            PKG_DEPENDENCIES: 'default'
          minimum_dependencies_conda:
            FACET_V_PYTHON_BUILD: '=3.6.*'
            BUILD_SYSTEM: 'conda'
            PKG_DEPENDENCIES: 'min'
          maximum_dependencies_conda:
            FACET_V_PYTHON_BUILD: '=3.8.*'
            BUILD_SYSTEM: 'conda'
            PKG_DEPENDENCIES: 'max'
          unconstrained_dependencies_conda:
            FACET_V_PYTHON_BUILD: '>=3.6,<4'
            PKG_DEPENDENCIES: 'unconstrained'
            BUILD_SYSTEM: 'conda'
          default_dependencies_tox:
            FACET_V_PYTHON_BUILD: '=3.7.*'
            BUILD_SYSTEM: 'tox'
            PKG_DEPENDENCIES: 'default'
          minimum_dependencies_tox:
            FACET_V_PYTHON_BUILD: '=3.6.*'
            BUILD_SYSTEM: 'tox'
            PKG_DEPENDENCIES: 'min'
          maximum_dependencies_tox:
            FACET_V_PYTHON_BUILD: '=3.8.*'
            BUILD_SYSTEM: 'tox'
            PKG_DEPENDENCIES: 'max'
          unconstrained_dependencies_tox:
            FACET_V_PYTHON_BUILD: '>=3.6,<4'
            PKG_DEPENDENCIES: 'unconstrained'
            BUILD_SYSTEM: 'tox'            
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(FACET_V_PYTHON_BUILD)'
          displayName: 'Use Python $(FACET_V_PYTHON_BUILD)'

        - checkout: self
          path: pytools

        - script: dir $(Build.SourcesDirectory)

        - script: |
            conda install -y conda-build toml=0.10.* flit=3.0.*
          displayName: 'Install conda-build, flit, toml'
          condition: eq(variables['BUILD_SYSTEM'], 'conda')

        - script: |
            python -m pip install "toml==0.10.*"
            python -m pip install "flit==3.0.*"
            flit --version
            python -m pip install "tox==3.20.*"
            tox --version
          displayName: 'Install tox, flit & toml'
          condition: eq(variables['BUILD_SYSTEM'], 'tox')

        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              if [ "$BUILD_SYSTEM" = "conda" ] ; then eval "$(conda shell.bash hook)" ; fi
              export PYTHONPATH=$(System.DefaultWorkingDirectory)/src

              cd $(System.DefaultWorkingDirectory)

              ./make.py pytools $(BUILD_SYSTEM) $(PKG_DEPENDENCIES)

          displayName: "build & test conda&pip package"

  # Render docs and publish to GitHub Pages
  - stage:
    displayName: 'Docs'
    variables:
    - group: github_ssh

    jobs:
    - job:
      displayName: 'Build and publish docs'
      # condition: eq(variables.master_or_release, 'True') # todo: uncomment when ready 

      pool:
          vmImage: 'ubuntu-latest'

      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.8.*'
          displayName: 'use Python 3.8'

        - checkout: self
          path: pytools

        - script: dir $(Build.SourcesDirectory)

        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              set -e
              eval "$(conda shell.bash hook)"
              cd $(System.DefaultWorkingDirectory)
              export PYTHONPATH=$(System.DefaultWorkingDirectory)/src
              conda env create -f environment.yml
              conda activate pytools-develop
              python sphinx/make.py html
          displayName: 'Render docs'

        - task: InstallSSHKey@0
          inputs:
            knownHostsEntry: $(knownHostsEntry)
            sshPublicKey: $(sshPublicKey)
            sshKeySecureFile: 'deploy_docs'
          displayName: 'Install the deploy SSH key'

        - task: Bash@3
          condition: succeededOrFailed()
          inputs:
            targetType: 'inline'
            script: |
              set -e
              echo "Current directory contents:"
              dir
              echo "Adjusting git credentials"
              git config --global user.name "Azure Pipelines"
              git config --global user.email "azuredevops@microsoft.com"
              git config --global url.ssh://git@github.com/.insteadOf https://github.com/
              git checkout --track origin/github-pages
              eval "$(conda shell.bash hook)"
              conda activate pytools-develop
              python sphinx/make.py prepare_docs_deployment
              git status
              git add docs
              echo "Staged docs HTML build"
              git status
              git commit -m "Publishing GitHub Pages [skip ci]"
              echo "Committed to local branch github-pages"
              git push --set-upstream origin github-pages
          displayName: 'Publish docs'
